package org.snowyegret.mojo.item.spell.other;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Iterator;

import net.minecraft.util.BlockPos;

import org.snowyegret.geom.IntegerDomain;
import org.snowyegret.mojo.MoJo;
import org.snowyegret.mojo.item.spell.Spell;
import org.snowyegret.mojo.player.Player;
import org.snowyegret.mojo.select.Selection;
import org.snowyegret.mojo.select.SelectionManager;

public class SpellCreateModel extends Spell {

	// final String assetsDir = "src/main/resources/assets/";
	// final String modelsDir = assetsDir + MoJo.MODID + "/models/item/";
	// final String texturesDir = assetsDir + MoJo.MODID + "/textures/items/";

	private final String header = "{\n\t\"__comment\": \"Generated by Mojo SpellCreateModel\",\n\t\"elements\": [\n";

	private final String elementTemplate = "\t\t{\n\t\t\t\"from\": [ %d, %d, %d ],\n\t\t\t\"to\": [ %d, %d, %d ],\n\t\t\t\"faces\": {"
			+ "\n\t\t\t\t\"down\":  { \"texture\": \"#tex\" },"
			+ "\n\t\t\t\t\"up\":    { \"texture\": \"#tex\" },"
			+ "\n\t\t\t\t\"north\": { \"texture\": \"#tex\" },"
			+ "\n\t\t\t\t\"south\": { \"texture\": \"#tex\" },"
			+ "\n\t\t\t\t\"west\":  { \"texture\": \"#tex\" },"
			+ "\n\t\t\t\t\"east\":  { \"texture\": \"#tex\" }\n\t\t\t}\n\t\t}";

	private final String textureTemplate = "\t\"textures\": {\n\t\t\"layer0\": \"%s:items/%s\","
			+ "\n\t\t\"tex\": \"%s:items/%s\"\n\t},\n";

	private final String display = "\t\"display\": {\n\t\t\"firstperson\": {\n\t\t\t\"rotation\": [ -20, -100, 0 ],"
			+ "\n\t\t\t\"translation\": [ 0, 5, 1 ],\n\t\t\t\"scale\": [ 0.7, 1, 1 ]\n\t\t}\n\t}\n";

	public SpellCreateModel() {
		super(1);
	}

	@Override
	public void invoke(Player player) {
		Iterable<Selection> selections = player.getSelections();
		if (!selections.iterator().hasNext()) {
			player.clearSelections();
			player.clearPicks();
			return;
		}
		IntegerDomain domain = player.getSelectionManager().getDomain();
		// Find the corner of the domain which is closest to the origin
		BlockPos origin = new BlockPos(domain.rx.getMinimum(), domain.ry.getMinimum(), domain.rz.getMinimum());
		player.clearSelections();
		player.clearPicks();
		StringBuilder builder = new StringBuilder();
		builder.append(header);
		for (Iterator iterator = selections.iterator(); iterator.hasNext();) {
			Selection s = (Selection) iterator.next();
			BlockPos pos = s.getPos();
			pos = pos.subtract(origin);
			int x = pos.getX();
			int y = pos.getY();
			int z = pos.getZ();
			String element = String.format(elementTemplate, x, y, z, x + 1, y + 1, z + 1);
			builder.append(element);
			if (iterator.hasNext()) {
				builder.append(",");
			}
			builder.append("\n");
		}
		builder.append("\t],\n");
		String modelName = "test";
		String texture = String.format(textureTemplate, MoJo.MODID, modelName, MoJo.MODID, modelName);
		builder.append(texture);
		builder.append(display);
		builder.append("}");
		String json = builder.toString();
		System.out.println("json=" + json);

		// try {
		// // Path path = Paths.get(modelsDir + modelName + ".json");
		// Path path = Paths.get(modelName + ".json");
		// System.out.println("path=" + path);
		// Path file = Files.createFile(path);
		// BufferedWriter writer = Files.newBufferedWriter(file, Charset.forName("US-ASCII"));
		// writer.write(json, 0, json.length());
		// writer.close();
		// } catch (IOException e) {
		// System.out.println(e);
		// }
	}
}
