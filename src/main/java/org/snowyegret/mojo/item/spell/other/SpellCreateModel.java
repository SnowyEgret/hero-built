package org.snowyegret.mojo.item.spell.other;

import java.io.BufferedWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.List;

import net.minecraft.client.Minecraft;
import net.minecraft.util.BlockPos;

import org.snowyegret.geom.IntegerDomain;
import org.snowyegret.mojo.MoJo;
import org.snowyegret.mojo.item.spell.Spell;
import org.snowyegret.mojo.player.Player;
import org.snowyegret.mojo.select.Selection;
import org.snowyegret.mojo.util.ResourcePack;
import org.snowyegret.mojo.util.StringUtils;

public class SpellCreateModel extends Spell {

	private final String header = "{\n\t\"__comment\": \"Generated by Mojo SpellCreateModel\",\n\t\"elements\": [";

	private final String orb = "\n\t\t{\n\t\t\t\"from\": [ 0, 0, 0 ],\n\t\t\t\"to\": [ 16, 16, 16 ],\n\t\t\t\"faces\": {"
			+ "\n\t\t\t\t\"down\":  { \"texture\": \"#orb\" },"
			+ "\n\t\t\t\t\"up\":    { \"texture\": \"#orb\" },"
			+ "\n\t\t\t\t\"north\": { \"texture\": \"#orb\" },"
			+ "\n\t\t\t\t\"south\": { \"texture\": \"#orb\" },"
			+ "\n\t\t\t\t\"west\":  { \"texture\": \"#orb\" },"
			+ "\n\t\t\t\t\"east\":  { \"texture\": \"#orb\" }\n\t\t\t}\n\t\t},";

	private final String elementTemplate = "\n\t\t{\n\t\t\t\"from\": [ %d, %d, %d ],\n\t\t\t\"to\": [ %d, %d, %d ],\n\t\t\t\"faces\": {"
			+ "\n\t\t\t\t\"down\":  { \"texture\": \"#tex\", \"cullface\": \"down\" },"
			+ "\n\t\t\t\t\"up\":    { \"texture\": \"#tex\", \"cullface\": \"up\" },"
			+ "\n\t\t\t\t\"north\": { \"texture\": \"#tex\", \"cullface\": \"north\" },"
			+ "\n\t\t\t\t\"south\": { \"texture\": \"#tex\", \"cullface\": \"south\" },"
			+ "\n\t\t\t\t\"west\":  { \"texture\": \"#tex\", \"cullface\": \"west\" },"
			+ "\n\t\t\t\t\"east\":  { \"texture\": \"#tex\", \"cullface\": \"east\" }\n\t\t\t}\n\t\t}";

	private final String textureTemplate = "\n\t\"textures\": {\n\t\t\"layer0\": \"%s:items/%s\","
			+ "\n\t\t\"tex\": \"%s:items/%s\",\n\t\t\"orb\": \"%s:items/orb\"\n\t},";

	private final String display = "\n\t\"display\": {\n\t\t\"firstperson\": {\n\t\t\t\"rotation\": [ 0, 0, 0 ],"
			+ "\n\t\t\t\"translation\": [ 0.50, 8.00, 1.75 ],\n\t\t\t\"scale\": [ 0.70, 0.70, 0.57 ]\n\t\t},"
			+ "\n\t\t\"thirdperson\": {\n\t\t\t\"rotation\": [ 0, 0, 0 ],"
			+ "\n\t\t\t\"translation\": [ 0.00, 4.25, -1.75 ],\n\t\t\t\"scale\": [ 0.5, 0.5, 0.5 ]\n\t\t}\n\t}";

	public SpellCreateModel() {
		super(1);
	}

	@Override
	public void invoke(Player player) {
		Iterable<Selection> selections = player.getSelections();
		if (!selections.iterator().hasNext()) {
			player.clearSelections();
			player.clearPicks();
			return;
		}
		IntegerDomain domain = player.getSelectionManager().getDomain();
		// Find the corner of the domain which is closest to the origin
		BlockPos min = new BlockPos(domain.rx.getMinimum(), domain.ry.getMinimum(), domain.rz.getMinimum());
		BlockPos max = new BlockPos(domain.rx.getMaximum(), domain.ry.getMaximum(), domain.rz.getMaximum());
		System.out.println("min=" + min);
		System.out.println("max" + max);
		BlockPos diff = max.subtract(min);
		System.out.println("diff=" + diff);
		BlockPos offset = new BlockPos(8, 8, 8).subtract(diff);
		System.out.println("offset" + offset);
		player.clearSelections();
		player.clearPicks();
		StringBuilder builder = new StringBuilder();
		builder.append(header);
		builder.append(orb);
		for (Iterator iterator = selections.iterator(); iterator.hasNext();) {
			Selection s = (Selection) iterator.next();
			BlockPos pos = s.getPos();
			pos = pos.subtract(min);
			pos = pos.add(offset);
			int x = pos.getX();
			int y = pos.getY();
			int z = pos.getZ();
			String element = String.format(elementTemplate, x, y, z, x + 1, y + 1, z + 1);
			builder.append(element);
			if (iterator.hasNext()) {
				builder.append(",");
			}
		}
		builder.append("\n\t],");
		Spell firstSpellInHotbar = player.getHotbar().firstSpell();
		String modelName = StringUtils.underscoreNameFor(firstSpellInHotbar.getClass());
		String texture = String.format(textureTemplate, MoJo.MODID, modelName, MoJo.MODID, modelName, MoJo.MODID);
		builder.append(texture);
		builder.append(display);
		builder.append("\n}");
		String json = builder.toString();
		System.out.println("json=" + json);

//		ResourcePack pack = new ResourcePack(firstSpellInHotbar.getClass(), json);
//		System.out.println("p=" + pack);
//		Field defaultResourcePacks = null;
//		try {
//			defaultResourcePacks = Minecraft.class.getDeclaredField("defaultResourcePacks");
//		} catch (NoSuchFieldException e) {
//			e.printStackTrace();
//		} catch (SecurityException e) {
//			e.printStackTrace();
//		}
//		defaultResourcePacks.setAccessible(true);
//		List packList = null;
//		try {
//			packList = (List) defaultResourcePacks.get(Minecraft.getMinecraft());
//		} catch (IllegalArgumentException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (IllegalAccessException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		packList.add(pack);
//		System.out.println("packList=" + packList);

		try {
			// Path path = Paths.get(modelsDir + modelName + ".json");
			Path path = Paths.get(modelName + ".json");
			System.out.println("path=" + path);
			Path file = Files.createFile(path);
			BufferedWriter writer = Files.newBufferedWriter(file, Charset.forName("US-ASCII"));
			writer.write(json, 0, json.length());
			writer.close();
		} catch (IOException e) {
			System.out.println(e);
		}
	}
}
